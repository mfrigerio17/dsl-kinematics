grammar iit.dsl.KinDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate kinDsl "dsl.iit/KinDsl"

Robot:
    'Robot' name = ID '{'
    base = RobotBase
	links  += Link+
	joints += Joint+
	'}';

AbstractLink:
    Link | RobotBase;

RobotBase:
    FixedRobotBase | FloatingRobotBase;

/* Any link might have an arbitrary number of frames *in addition*
 * to the default one (the link frame, which is the one that coincides
 * with the joint frame when the joint status is zero). These frames
 * are expressed wrt such default one.
 */

FixedRobotBase:
    'RobotBase' name=ID
    '{'
    inertiaParams = InertiaParams // if the base is fixed inertia does not matter, does it?
    childrenList = ChildrenList
    ('frames' ('{'frames += RefFrame+'}')+)?
    '}';

FloatingRobotBase:
    'RobotBase' name=ID 'floating'
   '{'
    inertiaParams = InertiaParams
    childrenList = ChildrenList
    ('frames' ('{'frames += RefFrame+'}')+)?
    '}';

Link:
    'link' name=ID '{'
    'id' '=' num = MY_ID
    inertiaParams = InertiaParams
    childrenList = ChildrenList
    ('frames' ('{'frames += RefFrame+'}')+)?
    '}';

InertiaParams:
    ('inertia_params'|'inertia_properties') '{'
        'mass' '=' mass=Var
        'CoM'  '=' com=Vector3
        ('Ix''=' ix = Var &
         'Iy''=' iy = Var &
         'Iz''=' iz = Var &
         'Ixy''=' ixy = Var &
         'Ixz''=' ixz = Var &
         'Iyz''=' iyz = Var)
        ('ref_frame' '=' frame=[RefFrame])?
    '}'
;

Joint:
    RevoluteJoint | PrismaticJoint;

RevoluteJoint:
    'r_joint' name=ID '{'
    ('id' '=' num = MY_ID)?
    'ref_frame' '{'refFrame = RotoTrasl'}'
    '}';

PrismaticJoint:
    'p_joint' name=ID '{'
    ('id' '=' num = MY_ID)?
    'ref_frame' '{'refFrame = RotoTrasl'}'
    '}';

/* The explicit action {.} ensures object creation, in order to
   have an empty list when there are no children (instead of having
   no list at all)
*/
ChildrenList: {ChildrenList}
    'children' '{'
      (children += ChildSpec)*
    '}';

ChildSpec :
    link=[Link] 'via' joint=[Joint];

RotoTrasl:
    'translation' '=' translation = Vector3
    'rotation' '=' rotation = Vector3
    ;

/* A reference frame basically exists in terms of the roto-translation
   with respect to some other frame. Plus, it has a name
*/
RefFrame:
    name = ID '{'
    transform = RotoTrasl
    '}'
;
    
Vector3  :
    '('x=Var','y=Var','z=Var')';


Var :  FloatLiteral | Expr ;

FloatLiteral : value=FLOAT ;
Expr : PlainExpr | MultExpr | DivExpr ;

PlainExpr : identifier=Identifier;             // e.g. '-PI'
MultExpr  : mult=FLOAT identifier=Identifier;  // e.g. '5.0 x'
DivExpr   : identifier=Identifier'/'div=FLOAT; // e.g. 'PI/2.0'

Identifier : ParameterLiteral | PILiteral;
ParameterLiteral : minus?='-'? varname=ID;
PILiteral  : minus?='-'? varname='PI';

terminal FLOAT returns ecore::EFloat : ('+'?|'-')('0'..'9')*'.'('0'..'9')+;

// Link '0' is always the robot base.
// So the numbering for other links should start from 1, as for joints.
// TODO: with a floating base, the robot base itself should be '1' (with the virtual
//   link representing the world being '0', and the virtual 6DOFs joint being
//   '1'), and subsequent links and joints should be 2, 3, ...
terminal MY_ID returns ecore::EInt: ('1'..'9')('0'..'9')*;
