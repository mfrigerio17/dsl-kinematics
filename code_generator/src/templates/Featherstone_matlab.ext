import iit::dsl::kinDsl;

create List[AbstractLink] abstractLinks(Robot robot) :
    this.addAll(robot.links) ->
    this.add(robot.base)
;

/* Returns whether the ChildrenList contains the specified link
*/
Boolean contains(ChildrenList this, AbstractLink link) :
    (this.children.select(child | child.link == link)).size != 0
;

AbstractLink getParent(AbstractLink link) :
    abstractLinks( (Robot)link.eContainer() )
        .select(l| l.childrenList.contains(link))
            .first()
;

getID(AbstractLink this) :
    "Warning, no implementation of getID() for AbstractLink";
getID(Link this) :
    this.num;
getID(FixedRobotBase this) :
    0;
getID(FloatingRobotBase this) :
    1;


jointPitch(Joint this) :
    "## WARNING ## no specific 'jointPitch()' defined for type " + this.metaType.name
;
jointPitch(RevoluteJoint this) :
    "0.0"
;
jointPitch(PrismaticJoint this) :
    "inf"
;

jointTransform(Joint this) :
    "Xrotx(" + refFrame.rotation.items.get(0) + ") * " +
    "Xroty(" + refFrame.rotation.items.get(1) + ") * " +
    "Xrotz(" + refFrame.rotation.items.get(2) + ") * " +
    "Xtrans(" + refFrame.translation.toMatlabVector() + ");"
;

getInertiaTensor(InertiaParams this) :
    "[ [" + ix + " -" + ixy + " -" + ixz + "]; [ -" +
          ixy + " " + iy + " -" + iyz + "]; [ -" +
          ixz + " -" + iyz + " " + iz + "] ]"
;


inertiaParams(AbstractLink this) :
    "model.I{" + this.getID() + "} = mcI( " + this.inertiaParams.mass + ", " +
        toMatlabVector(this.inertiaParams.com) + ", " +
        getInertiaTensor(this.inertiaParams) + ");"
;

inertiaParams(FixedRobotBase this) :
    ""
    //this prevents from generating anything for a FixedBase,
    // since its inertia params are irrelevant 
;


toMatlabVector(Vector3 this) :
    "[" + this.items.get(0) + " " + this.items.get(1) + " " + this.items.get(2) + "]"
;


foo(Link this) :
    //this.inertiaParams.com.metaType
    this.refFrame.translation.items.metaType
;

