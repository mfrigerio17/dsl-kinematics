«IMPORT iit::dsl::kinDsl»

«EXTENSION templates::common»

«DEFINE main FOR Robot»
«REM»
======================================
.DYN MODEL FILE
======================================
«ENDREM»
«FILE name.toLowerCase()+"/math/" + name.toLowerCase()+".dyn"»
{ (* Base Coordinate System *)
{jointID,{ID=0}},
{floatingBase,{«IF base.isFloating()»1«ELSE»0«ENDIF»}},
{notUsed,{}},
{notUsed,{}},
{successors,{1}},
{inertia,GenInertiaMatrixS["links",ID,1]},
{massCenterMass,GenMCMVectorS["links",ID,1]},
{mass,GenMassS["links",ID]},
{baseVariables,GenBaseVariablesS["basec","baseo",ID]},
{extForce,GenExtForceS["uex",ID]}
}
«FOREACH joints AS j-»
«EXPAND jointBlock FOR j-»
«ENDFOREACH-»
{ (* dummy to draw endeffector *)
{jointID,{ID=104}},
{jointAxis,{0,0,0}},
{translation,{eff$1$$x[[1]],eff$1$$x[[2]],eff$1$$x[[3]]}},
{rotationMatrix,{eff$1$$a[[1]],eff$1$$a[[2]],eff$1$$a[[3]]}},
{successors,{}},
{inertia,{{0,0,0},{0,0,0},{0,0,0}}},
{massCenterMass,{eff$1$$mcm[[1]],eff$1$$mcm[[2]],eff$1$$mcm[[3]]}},
{mass,{eff$1$$m}},
{jointVariables,{0,0,0,0,0}},
{extForce,{0,0,0,0,0,0}}
}
«ENDFILE»

«REM»
======================================
MAKEFILES: imakefile.unix
======================================
«ENDREM»
«FILE name.toLowerCase()+"/makefiles/imakefile.unix"»
INCLUDES = -I../src -I../include -I../math \
-I$(MY_INCLUDES) -I/usr/X11/include \
-I/usr/local/glut/include

CFLAGS     = $(OPTIMIZE_CC_FLAGS) $(INCLUDES) -D$(MACHTYPE)
SRCDIR     = ../src
LDFLAGS    = $(LAB_LIBDIR)
LIBDIR     = $(MYLIBDIR)/$(MACHTYPE)
HEADERDIR  = $(MYINCLUDEPATH)
LIBRARIES  =
BINDIR     = .

SRCS_COMMON  = \
SL_user_commands.c \
SL_user_common.c \
SL_kinematics.c \
SL_dynamics.c \
SL_invDynNE.c \
SL_invDynArt.c \
SL_forDynComp.c \
SL_forDynArt.c

OBJS_COMMON  = \
SL_user_commands.o \
SL_user_common.o \
SL_kinematics.o \
SL_dynamics.o \
SL_invDynNE.o \
SL_invDynArt.o \
SL_forDynComp.o \
SL_forDynArt.o

SRCS_X«name.toUpperCase()» = \
SL_main.c \
SL_user_common.c

OBJS_X«name.toUpperCase()» = \
SL_main.o \
SL_user_common.o

LIBS_X«name.toUpperCase()» = -lSLcommon -lutility -lX11 -lm

SOURCES  = $(SRCS_COMMON) SL_parm_estimate.c SL_user_simulation.c SL_user_openGL.c SL_main.c SL_user_task.c SL_user_sensor_proc_unix.c SL_user_motor.c SL_user_vision.c
OBJECTS  = $(OBJS_COMMON) SL_parm_estimate.o SL_user_simulation.o SL_user_openGL.o SL_main.o SL_user_task.o SL_user_sensor_proc_unix.o SL_user_motor.o SL_user_vision.o

HEADERS =

LIB_MOTOR     = -lSLmotor -lSLcommon -lutility $(COMM_LIBRARIES) -lm
LIB_VISION    = -lSLvision -lSLcommon -llwpr -lutility $(COMM_LIBRARIES) -lm

KeepUpToDateCopy( SL_kinematics.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_dynamics.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_forDynArt.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_forDynComp.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_invDynNE.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_invDynArt.c, $(LAB_ROOT)/SL/src, $(SRCDIR))
KeepUpToDateCopy( SL_parm_estimate.c, $(LAB_ROOT)/SL/src, $(SRCDIR))

ProgramListTarget( x«name.toLowerCase()», $(OBJS_X«name.toUpperCase()»), $(LIBS_X«name.toUpperCase()») )
ProgramListTarget( xmotor, $(OBJS_COMMON) SL_user_motor.o SL_user_sensor_proc_unix.o ,$(LIB_MOTOR) )
ProgramListTarget( xvision, $(OBJS_COMMON) SL_user_vision.o, $(LIB_VISION) )

LibraryListAddTarget( «name.toLowerCase()», $(OBJS_COMMON), )
LibraryListAddTarget( «name.toLowerCase()»_openGL, SL_user_openGL.o ,  )
LibraryListAddTarget( «name.toLowerCase()»_task, SL_user_task.o ,  )
LibraryListAddTarget( «name.toLowerCase()»_simulation, SL_user_simulation.o ,  )

NormalObjRule( $(OBJECTS) )
«ENDFILE»
«ENDDEFINE»


«DEFINE jointBlock FOR Joint-»
{ (* Joint «name» *)
{jointID,{ID=«getID()»}},
«EXPAND jointAxis FOR this-»
{translation,{«refFrame.translation.items.get(0)»,«refFrame.translation.items.get(1)»,«refFrame.translation.items.get(2)»}},
{rotationMatrix,{«refFrame.rotation.items.get(0)»,«refFrame.rotation.items.get(1)»,«refFrame.rotation.items.get(2)»}},
{successors,{«EXPAND getSuccessors FOR this-»}},
{inertia,GenInertiaMatrixS["links",ID,1]},
{massCenterMass,GenMCMVectorS["links",ID,1]},
{mass,GenMassS["links",ID]},
{jointVariables,GenVariablesS["state",ID]},
{extForce,GenExtForceS["uex",ID]}
}
«ENDDEFINE»

«DEFINE jointAxis FOR Joint-»
«ENDDEFINE»
«DEFINE jointAxis FOR PrismaticJoint-»
{jointAxis,{0,0,0,0,0,1}},
«ENDDEFINE»
«DEFINE jointAxis FOR RevoluteJoint-»
{jointAxis,{0,0,1}},
«ENDDEFINE»

«DEFINE getSuccessors FOR Joint-»
«LET getSuccessorLink().childrenList.children AS children-»
«IF children.size == 0-»104«ELSE-»
«FOREACH children.withoutLast() AS child-»
«child.joint.getMyID()-»,
«ENDFOREACH-»
«children.last().joint.getMyID()-»
«ENDIF-»
«ENDLET-»
«ENDDEFINE»



