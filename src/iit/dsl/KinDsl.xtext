grammar iit.dsl.KinDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate kinDsl "dsl.iit/KinDsl"

Robot:
    'Robot' name = ID '{'
    base = RobotBase
	links  += Link+
	joints += Joint+
	'}';

AbstractLink:
    Link | RobotBase;

RobotBase:
    FixedRobotBase | FloatingRobotBase;

FixedRobotBase:
    'RobotBase' name=ID
    '{'
    //mass = LinkMass // if the base is fixed mass does not matter, does it?
    childrenList = ChildrenList
    refFrame = RefFrame
    '}';

/* For a floating base it does not make sense to specify the transform for
   its reference frame, so the 'refFrame' property is omitted.
*/
FloatingRobotBase:
    'RobotBase' name=ID 'floating'
   '{'
    mass = LinkMass
    childrenList = ChildrenList
    '}';

Link:
    'link' name=ID '{'
    'id' '=' num = MY_ID
    mass = LinkMass
    childrenList = ChildrenList
    refFrame = RefFrame
    '}';

LinkMass:
    'mass' '=' value=FLOAT;

Joint:
    RevoluteJoint | PrismaticJoint;

RevoluteJoint:
    'r_joint' name=ID '{'
    'id' '=' num = MY_ID
    refFrame = RefFrame
    '}';

PrismaticJoint:
    'p_joint' name=ID '{'
    'id' '=' num = MY_ID
    refFrame = RefFrame
    '}';

/* The explicit action {.} ensures object creation, in order to
   have an empty list when there are no children (instead of having
   no list at all)
*/
ChildrenList: {ChildrenList}
    'children' '{'
      (children += ChildSpec)*
    '}';

ChildSpec :
    link=[Link] 'via' joint=[Joint];

/* A reference frame basically exists in terms of the roto-translation
   with respect to some other frame.
*/
RefFrame:
    'ref_frame' '{'
    'translation' ':' translation = Translation
    'rotation' ':' rotation = Rotation
    '}';

Translation:
    Vector3;
Rotation:
    Vector3;
    
    
Vector3:
    '('FLOAT','FLOAT','FLOAT')';

terminal FLOAT returns ecore::EFloat : ('+'?|'-')('0'..'9')*'.'('0'..'9')+;

// Link '0' is always the robot base.
// So the numbering for other links should start from 1, as for joints.
// TODO: with a floating base, the robot base itself should be '1' (with the virtual
//   link representing the world being '0', and the virtual 6DOFs joint being
//   '1'), and subsequent links and joints should be 2, 3, ...
terminal MY_ID returns ecore::EInt: ('1'..'9')('0'..'9')*;
