/*
 * generated by Xtext
 */
package iit.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import iit.dsl.generator.misc.Misc
import iit.dsl.kinDsl.Robot


class KinDslGenerator implements IGenerator {
    extension Common common = new Common()
    FramesTransforms frTransforms = new FramesTransforms()
    Misc miscGen = Misc::getInstance()
    MotionDSLDocGenerator motiongen = new MotionDSLDocGenerator()

    override void doGenerate(Resource resource, IFileSystemAccess fsa) {
        val robot = resource.contents.head as Robot;
        fsa.generateFile(robot.name+".urdf", miscGen.URDF_ROS_model(robot))
        fsa.generateFile(robot.name+".sd", miscGen.SDFAST_model(robot))
        fsa.generateFile(FramesTransforms::fileName(robot), frTransforms.coordinateTransformsDSLDocument(robot))
        fsa.generateFile(MotionDSLDocGenerator::fileName(robot), motiongen.documentContent(robot))
        //testUtilities()
    }

    def testITensorRotation(Robot hyl) {
        val hip = hyl.getLinkByName("hip")
        val original = hip.inertiaParams;
        val comFrame = hip.frames.get(0);
        val transf   = Utilities::rototranslate(original,
            comFrame.transform.translation.x.asFloat,
            comFrame.transform.translation.y.asFloat,
            comFrame.transform.translation.z.asFloat,
            comFrame.transform.rotation.x.asFloat,  //(-Math::PI/5) as float,//
            comFrame.transform.rotation.y.asFloat,  //(-Math::PI/6) as float,//
            comFrame.transform.rotation.z.asFloat, //(-Math::PI/3) as float)//
            false);
        System::out.println(transf.mass)
        System::out.println('''«transf.com.x.asFloat»  «transf.com.y.asFloat»  «transf.com.z.asFloat»''')
        System::out.println('''«transf.ix»  «transf.iy»  «transf.iz»  «transf.ixy»  «transf.ixz»  «transf.iyz»''')
        //System::out.println(transf.mass)
    }


    def test_getJoint(Robot robot) {
        System::out.println('''
        «FOR link : robot.links»
        Parent «link.parent.name», child: «link.name»  -  Joint: «getJoint(link.parent, link).name»
        «ENDFOR»'''.toString() );
    }

    def test_jointFromVariableName(Robot robot) {
        System::out.println('''
        «FOR joint : robot.joints»
        Joint «joint.name», variable: «joint.variableName», joint again: «(robot.getJointFromVariableName(joint.variableName.toString())).name»
        «ENDFOR»'''.toString() );
    }
    /*
    '''
        «FOR link : robot.abstractLinks»
            «FOR link2 : robot.abstractLinks»
                «val chain = common.buildChain(link, link2)»
                «link.name» - «link2.name»   :   «FOR AbstractLink el : chain» «el.name»«ENDFOR»
            «ENDFOR»
        «ENDFOR»

    '''
    //*/
    /*
    var AbstractLink found;
        for(AbstractLink l: robot.abstractLinks) {
            found = common.getLinkByName(robot, l.name)
            if(! found.equals(l)) {
                throw new RuntimeException("test failed!")
            }
        }
    //throw new RuntimeException("OK!!")
    //*/
    /*
    '''
        «FOR link : robot.abstractLinks»
        Link «link.name» moved by  «link.connectingJoint»
        «ENDFOR»
        «FOR link : robot.links»
        Link «link.name» connected from  «link.parent.name»  via  «link.connectingJoint.name»
        «ENDFOR»
        «FOR joint : robot.joints»
        Joint «joint.name» connecting  «joint.successorLink.name»
        «ENDFOR»
    '''
    //*/
    /*
    '''
        «FOR link : robot.links»
        Link «link.name» connected from  «link.parent.name»  via  «link.connectingJoint.name»
        «ENDFOR»
        «FOR joint : robot.joints»
        Joint «joint.name» connecting  «joint.successorLink.name»
        «ENDFOR»
    '''
    //*/


    def temp(Resource resource) '''
        «FOR r : resource.contents»
        «r.eClass.name»
        «ENDFOR»'''

    def testUtilities() {
        val rx = Math::random() + Math::random() + Math::random()
        val ry = -Math::random()
        val rz = -Math::random()
        System::out.println('''«rx»  «ry»  «rz»''')
        val mx = Utilities::rotated_X_original(rx, ry, rz)
        val double[] foo = Utilities::get_rxryrz(mx)
        System::out.println('''«foo.get(0)»  «foo.get(1)»  «foo.get(2)»''')
    }

}
